<%
IMPORT FILE "common_gch.gch";
function create_hidden_multiinsthostpara(handle, PARA[], instindex,  num)
{
for(var i = 0; i < num ; i ++)
{
="<INPUT type='hidden' name="+ PARA[i] +"dhcp"+ instindex +"   ID="+ PARA[i] +"dhcp"+ instindex +" value=''>\n";
="<script language=javascript>Transfer_meaning('";
=PARA[i] +"dhcp"+ instindex;
="','";
=encodeJS(get_para(handle, PARA[i]));
="');";
="</script>\n";
}
}
function hostdhcp_func(FP_ACTION, FP_INDEX, FP_ERRORSTR)
{
var FP_OBJNAME      = "OBJ_DNSDHCPHOST_ID";
var FP_MULTIDISPLAY = 1;
var FP_PARANUM      = 4;
var FP_HANDLE;
var FP_PARA[4] =
{
"IPAddress",
"HostName",
"MacAddr",
"LeaseTime"
};
if (FP_INDEX IS NULL)
{
FP_INDEX = -1;
}
var FP_INSTNUM = query_list(FP_OBJNAME, "IGD");
var FP_IDENTITY = getInstIdentityByAction(FP_OBJNAME, FP_MULTIDISPLAY, FP_ACTION, FP_INDEX);
if(FP_MULTIDISPLAY == 1)
{
for (var i=0; i<FP_INSTNUM; i++)
{
FP_HANDLE = create_paralist();
FP_IDENTITY = query_identity(i);
get_inst(FP_HANDLE, FP_OBJNAME, FP_IDENTITY);
create_hidden_multiinsthostpara(FP_HANDLE, FP_PARA, i, FP_PARANUM);
destroy_paralist(FP_HANDLE);
}
}
create_hidden_sep("DNSDHCP_ACTION", "");
create_hidden_sep("DNSDHCP_INSTNUM", FP_INSTNUM);
create_hidden_sep("DNSDHCP_ERRORSTR", "SUCC");
create_hidden_sep("DNSDHCP_ERRORPARAM", "SUCC");
if ("SUCC" == FP_ERRORSTR)
{
FP_ERRORSTR = get_cmret();
if (FP_ERRORSTR != "FAIL" && FP_ERRORSTR != "SUCC")
{
var cmret = "cmret_"+FP_ERRORSTR;
FP_ERRORSTR = load_string(cmret);
}
var FP_ERRORPARAM = get_errorparam();
var FP_ERRORTYPE = get_cmret_type();
set_hidden("DNSDHCP_ERRORSTR", FP_ERRORSTR);
set_hidden("DNSDHCP_ERRORPARAM", FP_ERRORPARAM);
set_hidden("IF_ERRORTYPE", FP_ERRORTYPE);
}
return FP_ERRORSTR;
}
%>
