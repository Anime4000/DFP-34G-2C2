<%
function auth_getenv(name, default_value)
{
var value = getenv(name);
if ( value == "N/A" || value == "")
{
value = default_value;
}
return value;
}
function get_integer_config(name)
{
var value = get_config(name);
return integer(value);
}
function auth_get_status_common(type)
{
var _type = type;
return session_get("status." + _type);
}
function auth_set_status_common(type, new_status)
{
var _type = type;
session_set("status." + _type, new_status);
}
function auth_sess_count(type)
{
var count = 0;
switch (type)
{
case "logined":
var old_sess_id = session_id();
var sess_count  = session_count();
for (var i = 0; i < sess_count; i++)
{
session_bind(i);
if ("logined" == auth_get_status_common("login"))
{
count++;
}
}
session_start(old_sess_id, 0);
break;
case "logined_me":
var old_sess_id     = session_id();
var old_username    = session_get("login_name");
if ("" != old_username && "N/A" != old_username)
{
var sess_count = session_count();
for (var i = 0; i < sess_count; i++)
{
session_bind(i);
if ("logined" == auth_get_status_common("login")
&& session_get("login_name") == old_username)
{
count++;
}
}
session_start(old_sess_id, 0);
}
break;
case "preemptable":
var old_sess_id     = session_id();
var old_right       = session_get("Right");
var old_username    = session_get("login_name");
var sess_count      = session_count();
var loop_right, loop_username;
for (var i = 0; i < sess_count; i++)
{
session_bind(i);
if (session_id() == old_sess_id)
{
continue;
}
loop_right = session_get("Right");
loop_username = session_get("login_name");
if ( "logined" == auth_get_status_common("login")
&& (loop_username == old_username || loop_right > old_right) )
{
count++;
}
}
session_start(old_sess_id, 0);
break;
case "all":
default:
count = session_count();
break;
}
return count;
}
function auth_if_defined(config_name)
{
var config_value = 0;
switch (config_name)
{
case "login.MUS.Block":
config_value = 1;
break;
default:
break;
}
return config_value;
}
function auth_dochgpwd(username, password, chgpwd_flag)
{
var flag = 0;
var FP_ERRORSTR = "SUCC";
var FP_IDENTITY = "";
var FP_OBJNAME  = "OBJ_USERINFO_ID";
var FP_INSTNUM  = query_list(FP_OBJNAME, "IGD");
unsetenv("request/FP_ERRORSTR");
for (var i = 0; i < FP_INSTNUM; i++)
{
FP_IDENTITY = query_identity(i);
var FP_HANDLE = create_paralist();
get_inst(FP_HANDLE, FP_OBJNAME, FP_IDENTITY);
var _username = get_para(FP_HANDLE, "Username");
if (_username == username)
{
flag = 1;
}
destroy_paralist(FP_HANDLE);
if (1 == flag)
{
FP_HANDLE = create_paralist();
set_para(FP_HANDLE, "Username", username);
set_para(FP_HANDLE, "Password", password);
if (1 == chgpwd_flag && auth_if_defined("login.ChgPwd"))
{
set_para(FP_HANDLE, "ChgPwd", 0);
}
FP_IDENTITY = set_inst(FP_HANDLE, FP_OBJNAME, FP_IDENTITY);
FP_ERRORSTR = get_cmret();
if ("SUCC" == FP_ERRORSTR)
{
return 1;
}
else
{
if (FP_ERRORSTR != "FAIL")
{
setenv("request/FP_ERRORSTR", load_string("cmret_" + FP_ERRORSTR));
}
return 0;
}
}
}
return 0;
}
function auth_preempt_common(from_sessid, to_sessid)
{
var old_sess_id     = session_id();
var preempt_flag    = 0;
session_start(from_sessid, 0);
var username        = session_get("login_name");
var right           = session_get("Right");
var sess_count      = auth_sess_count("all");
var loop_sess_id, loop_username, loop_right, loop_login_status;
for (var i = 0; i < sess_count; i++)
{
session_bind(i);
loop_sess_id = session_id();
if (loop_sess_id != from_sessid && loop_sess_id == to_sessid)
{
loop_login_status    = auth_get_status_common("login");
loop_username        = session_get("login_name");
loop_right           = session_get("right");
if ( "logined" == loop_login_status
&& (username == loop_username || loop_right > right) )
{
preempt_flag = 1;
auth_set_status_common("login", "banned");
}
}
}
if (1 == preempt_flag)
{
session_start(to_sessid, 1 * 60);
session_set("timeout", 1 * 60);
session_start(from_sessid, 0);
auth_set_status_common("login", "logined");
}
session_start(old_sess_id, 0);
if (1 != preempt_flag)
{
return 400;
}
return 0;
}
function isUserNamePwdCorrect(username, userpwd)
{
var flag = 0;
var HANDLE = create_paralist();
set_para(HANDLE, "Username",  username);
set_para(HANDLE, "Password",  userpwd);
if ( 0 == login(HANDLE, "OBJ_LOGIN_ID") )
{
flag = 1;
}
return flag;
}
function getParasByUsername(username, paras[])
{
var isUserExist = 0;
var HANDLE = create_paralist();
set_para(HANDLE, "Username", username);
var INSTNUM = qeury_list_bycond("OBJ_USERINFO_ID", "IGD", HANDLE);
destroy_paralist(HANDLE);
if(INSTNUM != -1)
{
var IDENTITY;
for ( var i=0; i<INSTNUM; i++ )
{
HANDLE = create_paralist();
IDENTITY = query_identity(i);
get_inst(HANDLE, "OBJ_USERINFO_ID", IDENTITY);
var type = get_para(HANDLE, "Type");
destroy_paralist(HANDLE);
if ( type == 1 )
{
isUserExist = 1;
break;
}
}
if ( 1 == isUserExist )
{
HANDLE = create_paralist();
get_inst(HANDLE, "OBJ_USERINFO_ID", IDENTITY);
paras[0]    = get_para(HANDLE, "Password");
paras[1]    = get_para(HANDLE, "Right");
paras[2]    = get_para(HANDLE, "Enable");
if (auth_if_defined("login.ChgPwd"))
{
paras[3] = get_para(HANDLE, "ChgPwd");
}
else
{
paras[3] = 0;
}
destroy_paralist(HANDLE);
}
}
return isUserExist;
}
function getIdleSecs()
{
var  FP_HANDLE, value, idle;
FP_HANDLE   = create_paralist();
get_inst(FP_HANDLE, "OBJ_USERIF_ID", "");
value       = get_para(FP_HANDLE, "Timeout");
destroy_paralist(FP_HANDLE);
idle        = integer(value);
if (idle IS NULL || idle == 0)
idle    = 300;
else
idle    *= 60;
return idle;
}
function auth_sessid_common()
{
return get_remote_addr();
}
function auth_login_common(sess_id, user, pass)
{
var result = isUserNamePwdCorrect(user, pass);
if ( 1 == result )
{
var timeout = getIdleSecs();
var ip = get_remote_addr();
var ct = timestamp();
var right = getenv("Right");
var paras[4];
var succ = getParasByUsername(user, paras);
if (succ)
{
var right = paras[1];
var chg_pwd = paras[3];
session_start(sess_id, timeout);
auth_set_status_common("login", "logined");
if (chg_pwd)
{
auth_set_status_common("chgpwd", 1);
}
else
{
auth_set_status_common("chgpwd", 0);
}
session_set("Clientaddr", ip);
session_set("Lastvisit", ct);
session_set("login_name", user);
session_set("login_pwd", pass);
session_set("Right", right);
session_set("timeout", timeout);
session_set("IsLogin", 1);
setenv("errLoginNum", 0);
setenv("errLoginTime", 0);
var upload_tag = getenv("Uploading");
if (upload_tag != "1")
{
unsetenv("status");
unsetenv("state");
unsetenv("type");
}
return 0;
}
else
{
result = -1;
}
}
return 200;
}
function auth_logout_common()
{
session_destroy(session_id());
return 1;
}
function auth_check_common(sess_id)
{
var is_logined = 0;
var old_sess_id = session_id();
if ("N/A" != sess_id)
{
var sess_count = auth_sess_count("all");
for (var i = 0; i < sess_count; i++)
{
session_bind(i);
var _sess_id = session_id();
if (_sess_id == sess_id)
{
is_logined = 1;
}
}
}
session_start(old_sess_id, 0);
if (is_logined == 1)
{
return 0;
}
return 100;
}
function auth_login_err()
{
var errLoginNum = integer(auth_getenv("errLoginNum", 0));
setenv("errLoginNum", ++errLoginNum);
setenv("errLoginTime", timestamp());
return errLoginNum;
}
%>